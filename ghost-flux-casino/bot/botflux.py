import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CasinoBot:
    def __init__(self):
        self.application = Application.builder().token(config.BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("admin", self.admin_panel))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_id = user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in config.users_db:
            config.users_db[user_id] = {
                "balance": 0,
                "inventory": [],
                "username": user.username
            }
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å Web App
        keyboard = [
            [InlineKeyboardButton("üé∞ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–∑–∏–Ω–æ", web_app=WebAppInfo(url=f"{config.BOT_WEBAPP_URL}/index.html?user_id={user_id}"))],  # ‚Üê –ó–ê–ü–Ø–¢–ê–Ø –î–û–ë–ê–í–õ–ï–ù–ê
            [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="balance"),
             InlineKeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
            [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=f"https://t.me/{config.CHANNEL[1:]}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üëª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ghost FluX Casino, {user.first_name}!\n\n"
            "üéÆ –ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É –≤ –Ω–∞—à–µ–π —Ä—É–ª–µ—Ç–∫–µ!\n"
            "üí´ –í—ã–∏–≥—Ä—ã–≤–∞–π —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã!\n\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!",
            reply_markup=reply_markup
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        
        await query.answer()
        
        if query.data == "balance":
            balance = config.users_db[user_id]["balance"]
            await query.edit_message_text(
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∑–≤–µ–∑–¥\n\n"
                f"–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {config.ADMIN_USERNAME}"
            )
        
        elif query.data == "inventory":
            inventory = config.users_db[user_id]["inventory"]
            if not inventory:
                await query.edit_message_text("üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç")
            else:
                items_text = "\n".join([f"{item['emoji']} {item['name']} - {item['value']} –∑–≤–µ–∑–¥" for item in inventory])
                await query.edit_message_text(
                    f"üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n{items_text}\n\n"
                    f"–î–ª—è –≤—ã–≤–æ–¥–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å {config.ADMIN_USERNAME}"
                )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
        if user_id == config.ADMIN_ID:
            text = update.message.text
            if text.startswith("/add"):
                try:
                    _, target_user_id, amount = text.split()
                    target_user_id = int(target_user_id)
                    amount = int(amount)
                    
                    if target_user_id not in config.users_db:
                        config.users_db[target_user_id] = {
                            "balance": 0,
                            "inventory": [],
                            "username": "unknown"
                        }
                    
                    config.users_db[target_user_id]["balance"] += amount
                    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
                    
                except Exception as e:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: /add user_id amount")
    
    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        if user_id != config.ADMIN_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
            return
        
        total_users = len(config.users_db)
        total_balance = sum(user["balance"] for user in config.users_db.values())
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("‚è∞ –û–∂–∏–¥–∞—é—Ç –≤—ã–≤–æ–¥–∞", callback_data="admin_withdrawals")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Ghost FluX\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance} –∑–≤–µ–∑–¥\n"
            f"‚è∞ –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥: {len(config.withdraw_requests)}",
            reply_markup=reply_markup
        )
    
    def run(self):
        self.application.run_polling()

if __name__ == "__main__":
    bot = CasinoBot()
    bot.run()